<script src="https://threejs.org/build/three.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>




const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);
camera.position.set(0, 0, 4);

const scene = new THREE.Scene();
var controls = new THREE.OrbitControls(camera, renderer.domElement);
var light = new THREE.DirectionalLight(0xffffff, 0.4);
scene.add(light);
scene.add(new THREE.AmbientLight(0xffffff, 0.5));

var pts = [
  new THREE.Vector3(Math.sqrt(8 / 9), 0, -(1 / 3)),
  new THREE.Vector3(-Math.sqrt(2 / 9), Math.sqrt(2 / 3), -(1 / 3)),
  new THREE.Vector3(-Math.sqrt(2 / 9), -Math.sqrt(2 / 3), -(1 / 3)),
  new THREE.Vector3(0, 0, 1)
];

var faces = [ //triangle soup
  pts[0].clone(), pts[2].clone(), pts[1].clone(),
  pts[0].clone(), pts[1].clone(), pts[3].clone(),
  pts[1].clone(), pts[2].clone(), pts[3].clone(),
  pts[2].clone(), pts[0].clone(), pts[3].clone()
];
var geom = new THREE.BufferGeometry().setFromPoints(faces);
geom.rotateX(-Math.PI * 0.5);
geom.computeVertexNormals();
var matPts = new THREE.PointsMaterial({
  size: 0.1,
  color: "red"
});
var points = new THREE.Points(geom, matPts);
scene.add(points);

var mat = new THREE.MeshLambertMaterial({
  map: new THREE.TextureLoader().load("https://t3.ftcdn.net/jpg/04/70/06/94/240_F_470069459_PL6lWEUsps1aWJuiIGfU4eXAYqsIOvUN.jpg"),
  side: THREE.DoubleSide,
  alphaTest: 0.5
});
mat.defines = {
  USE_UV: ""
};
var uniforms = {
  vSides: {
    value: 5
  }
};
mat.onBeforeCompile = shader => {
  console.log(shader.fragmentShader);
  shader.uniforms.vSides = uniforms.vSides;
  shader.fragmentShader = `
  	uniform float vSides;
    ` + shader.fragmentShader;
  shader.fragmentShader = shader.fragmentShader.replace(
    `#include <clipping_planes_pars_fragment>`,
    `#include <clipping_planes_pars_fragment>

float getShape(float outer, vec2 uv){
    uv *= 2.0;
    float a = atan(uv.x,-uv.y);
    float r = 3.1415926 * 2. / vSides;
    float d = cos( floor( .5 + a / r ) * r - a ) * length( uv );
    return step(outer, d);
}
`
  );
  shader.fragmentShader = shader.fragmentShader.replace(
    `vec4 diffuseColor = vec4( diffuse, opacity );`,
    `vec4 diffuseColor = vec4( diffuse, opacity );
    diffuseColor.a = getShape(0.25, vUv - 0.5);
    `
  );
}
var mesh = new THREE.Mesh(geom, mat);
scene.add(mesh);
renderer.setAnimationLoop(() => {
  renderer.render(scene, camera)
});
